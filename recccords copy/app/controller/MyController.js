/*
 * File: app/controller/MyController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Recccords.controller.MyController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            signUpContainer: '#signupContainer',
            startContainer: '#startContainer',
            subContainer: '#subContainer',
            createAccountResponse: '#createAccountResponse',
            signupForm: '#signupForm',
            loginContainer: '#loginContainer',
            loginForm: '#loginForm',
            loginResponse: '#loginResponse',
            releaseListContainer: '#releaseListContainer',
            releaseList: '#releaseList',
            viewport: '#viewport'
        },

        control: {
            "button#mybutton3": {
                tap: 'onSignUpTap'
            },
            "button#createAccountButton": {
                tap: 'onCreateAccountTap'
            },
            "button#signInButton": {
                tap: 'onSignInTap'
            },
            "button#loginButton": {
                tap: 'onLoginButtonTap'
            },
            "button#connectDiscogsButton": {
                tap: 'onDiscogsConnect'
            },
            "button#logoutButton": {
                tap: 'onLogoutTap'
            }
        }
    },

    onSignUpTap: function(button, e, eOpts) {
        signupView = Ext.create('Recccords.view.SignUpContainer', {
            title: 'Recccords'
        });
        this.getSubContainer().push(signupView);
    },

    onCreateAccountTap: function(button, e, eOpts) {
        console.log("onButtonTap");
        var me = this;

        loginSuccess = function(result){
            me.getCreateAccountResponse().setHtml("user created.");
            me.loggedInView = Ext.create('Recccords.view.LoggedInContainer', {
                title: 'Welcome to Recccords'
            });
            me.getSubContainer().push(me.loggedInView);
        };
        me.loginSuccess = loginSuccess;
        loginFailure = function(result) {
            me.getCreateAccountResponse().setHtml(result.error);
            console.log("loginfail");
            var error = result.error;
            console.log(error);

        };
        me.loginFailure = loginFailure;
        objectCreated = function(result){
            me.getCreateAccountResponse().setHtml("user created.");
            me.parseLogin(me.username,me.password,me.loginSuccess,me.loginFailure);
        };
        objectCreatedError= function(result) {
            me.getCreateAccountResponse().setHtml(result.error);
            console.log("objectCreatedError");
            var error = result.error;
            console.log(error);

        };

        var values = me.getSignupForm().getValues();
        me.username = values.usernameSignupField;
        console.log('tap username '+me.username);
        me.password = values.passwordSignupField;
        me.email = values.emailSignupField;
        parseSignUp(me.username,me.password,me.email,objectCreated,objectCreatedError);

    },

    onSignInTap: function(button, e, eOpts) {
        signinView = Ext.create('Recccords.view.LoginContainer', {
            title: 'Recccords'
        });
        this.getSubContainer().push(signinView);

    },

    onLoginButtonTap: function(button, e, eOpts) {
        console.log("onLoginButtonTap");
        me = this;

        loginSuccess = function(result){

            me.getLoginResponse().setHtml("user logged in.");

            var user = getParseUser();
            me.launchUserScreen(me,user);

        //     var viewport = me.getViewport();
        //     feedView = Ext.create('Recccords.view.FeedContainer', {

        //     });
        //     viewport.removeAll(true,false);
        //     viewport.add(feedView);

        };

        me.loginSuccess = loginSuccess;

        loginFailure = function(result) {
            me.getLoginResponse().setHtml(result.error);
            console.log("loginfail");
            var error = result.error;
            console.log(error);
        };
        me.loginFailure = loginFailure;

        var values = me.getLoginForm().getValues();
        me.username = values.emailSignupField;
        me.password = values.passwordSignupField;
        parseLogin(me.username,me.password,me.loginSuccess,me.loginFailure);


    },

    onDiscogsConnect: function(button, e, eOpts) {
        //location.href='auth/';
    },

    onLogoutTap: function(button, e, eOpts) {
        parseLogOut();
    },

    parseCreateUser: function(username, password, successcallback, failcallback) {
        Ext.Ajax.request({
            url: 'signup/',
            method: 'POST',
            params: {
                username: username,
                password: password
            },
            success: function(response){
                var responseObj = JSON.parse(response.responseText);
                if(responseObj.type == 'success'){
                    successcallback(responseObj);
                }
                if(responseObj.type == 'fail'){
                    failcallback(responseObj);
                }
            }
        });

    },

    launch: function() {
        me = this;

        var homeView = Ext.create('Recccords.view.mainView', {});
        var subC = homeView.down("#subContainer");
        me.getViewport().removeAll(true,false);

        var user = getParseUser();

        if ( user ) {

            me.launchUserScreen(me,user);

        } else {
            me.getViewport().add(homeView);
            console.log('no user found');
            me.loginView = Ext.create('Recccords.view.StartContainer', {
                title: 'Welcome to Recccords'
            });

            subC.push(me.loginView);
        }

    },

    checkSession: function(successcallback, failcallback) {
        console.log('checksession ');
        Ext.Ajax.request({
            url: 'index/',
            method: 'POST',
            success: function(response){
                var responseObj = JSON.parse(response.responseText);
                console.log("checksession result: " + responseObj.username + " need_oauth " + responseObj.oauth + " oauth_saved " + responseObj.saved);
                if(responseObj.username == ''){
                    failcallback(responseObj);
                }
                else{
                    successcallback(responseObj);
                }
            }
        });

    },

    launchUserScreen: function(me, user) {
        // a generic function for handling if we can show user the feed or if we need them to do oauth flow

        parseCheckToken(function(tokenVerified){

           console.log("in launch verify token is " + tokenVerified);

           if ( tokenVerified ) {

                console.log("MyController: redirecting to FEED");

                me.loggedInView = Ext.create('Recccords.view.LoggedInContainer', {
                    title: 'Welcome to Recccords'
                });

                me.feedView = Ext.create('Recccords.view.FeedContainer', {

                });

                //subC.push(me.loggedInView);
                me.getViewport().removeAll(true,false);
                me.getViewport().add(me.feedView);


            } else {


                console.log("MyController: redirecting to OAUTH");


                me.oauthView = Ext.create('Recccords.view.OAuthContainer', {

                });

                //subC.push(me.loggedInView);
                me.getViewport().removeAll(true,false);
                me.getViewport().add(me.oauthView);

            }

        });
    }

});
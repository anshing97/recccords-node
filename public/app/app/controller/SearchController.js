/*
 * File: app/controller/SearchController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Phonogram.controller.SearchController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            searchResultsContainer: '#searchResultsContainer',
            searchResultsList: '#searchResultsList',
            searchResultsItems: '#searchResultsItems',
            searchHomeButton: '#searchHomeButton',
            viewport: '#viewport'
        },

        control: {
            "searchfield#searchDiscogsField": {
                action: 'onSearchfieldAction'
            },
            "#searchResultsList": {
                selectionchange: 'onSearchListSelect'
            },
            "#searchResultsItems": {
                itemtap: 'onItemTap'
            },
            "container#searchContainer": {
                remove: 'onSearchContainerRemove'
            }
        }
    },

    onSearchfieldAction: function(textfield, e, eOpts) {
        var searchValue = textfield.getValue().trim();

        var me = this;

        me.clearImageInterval();

        // make sure we have a value to search
        if ( searchValue.length > 0 ) {


            searchDiscogs(searchValue,function(result,resultsCount,urls){

                console.log("SearchCallBack: begin ------------");
                console.log(result);
                console.log("SearchCallBack: end ------------");

                if ( resultsCount > 0 ) {

                    var searchStore = new Ext.data.Store({
                        model: 'Recccords.model.Release',
                        data: result.results
                    });

                    // set the store, this gets it to display
                    me.getSearchResultsItems().setStore(searchStore);

                    // create a new image polling callback
                    var newPolling = setInterval(function(){

                        getLocalImages(urls,function(res){

                            if ( res.status == 200 || res.status == 204 ) {

                                // got the results, clear it now
                                me.clearImageInterval();

                                if ( res.results ) {

                                    // fill in the images in records
                                    for ( var ii = 0; ii < res.results.length; ii++ ) {

                                        var record = searchStore.getAt(ii);
                                        record.set('thumb',res.results[ii]);

                                    }

                                }
                            }

                        });

                    },2500);

                    me.setImageInterval(newPolling);

                } else {
                    console.log("SearchCallBack: no results");
                }


            });
        }


    },

    onSearchListSelect: function(selectable, records, eOpts) {
        console.log('onSearchLIstSelect');
        saveToCollection(records[0].data);
    },

    onItemTap: function(dataview, index, target, record, e, eOpts) {
        console.log("SearchController: onItemtap: " + target._record.data.id);

        var me = this;

        me.clearImageInterval();

        me.successCB = function(results) {
            target.setStyle("background-color:rgb(255,255,255);");
            console.log("SearchController: results from getRecordDiscogsAndUserData: ");
            console.log(results);

            // create and set the data
            var detailContainer = Ext.create('Recccords.view.DetailContainer', {});
            detailContainer.setData(results);

            var viewport = me.getViewport();
            viewport.add(detailContainer);

            // this will trigger activate on DetaiLContainer ad DetailContainerController
            Ext.Viewport.setActiveItem(detailContainer);


        };

        me.failCB = function(error){
            console.log("SearchController: getRecordDiscogsAndUserData failed error : " + error);
        };
        target.setStyle("background-color:rgb(200,200,200);");
        getRecordDiscogsAndUserData(target._record.data.id,me.successCB,me.failCB);


    },

    onSearchContainerRemove: function(container, item, index, eOpts) {
        this.clearImageInterval();
    },

    clearImageInterval: function() {
        if ( this.imagePollingInterval ) {
            clearInterval(this.imagePollingInterval);
        }
    },

    setImageInterval: function(interval) {
        // just to be safe, clear it first
        this.clearImageInterval();

        // now set it
        this.imagePollingInterval = interval;
    }

});
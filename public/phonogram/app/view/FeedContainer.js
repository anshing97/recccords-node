/*
 * File: app/view/FeedContainer.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Recccords.view.FeedContainer', {
    extend: 'Ext.Container',

    requires: [
        'Ext.Toolbar',
        'Ext.Button',
        'Ext.dataview.DataView'
    ],

    config: {
        id: 'FeedContainer',
        layout: 'hbox',
        items: [
            {
                xtype: 'toolbar',
                docked: 'top',
                title: 'Feed',
                items: [
                    {
                        xtype: 'button',
                        border: '0 0 0 0',
                        id: 'feedHomeButton',
                        padding: '5 5 0 8',
                        iconCls: 'list',
                        text: ''
                    }
                ]
            },
            {
                xtype: 'container',
                flex: 1,
                layout: 'vbox',
                items: [
                    {
                        xtype: 'dataview',
                        flex: 1,
                        height: '100%',
                        id: 'feedItems',
                        style: 'background-color:white;',
                        width: '100%',
                        defaultType: 'feedDataItem',
                        emptyText: 'no data',
                        useComponents: true
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onFeedHomeButtonTap',
                event: 'tap',
                delegate: '#feedHomeButton'
            },
            {
                fn: 'onFeedContainerActivate',
                event: 'activate'
            }
        ]
    },

    onFeedHomeButtonTap: function(button, e, eOpts) {
        var me = this;
        console.log('on feed home ');
        var homeView = Ext.create('Recccords.view.mainView', {

        });
        var subC = homeView.down("#subContainer");
         me.loggedInView = Ext.create('Recccords.view.LoggedInContainer', {
                title: 'Welcome to Phonogram'
            });
        subC.push(me.loggedInView);
        var viewport = Ext.getCmp("viewport");
        viewport.removeAll();
        viewport.add(homeView);
    },

    onFeedContainerActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        console.log("onFeedContainerInitialize");
        var me = this;
        successCB = function(result) {
            console.log("collectioncallback " + result);
            var feedStore = Ext.data.Store({
            model: 'Recccords.model.FeedItem',
            data: result
            }) ;

            me.down('#feedItems').setStore(feedStore);

        };
        failCB = function(result){
            console.log("getFeed failed error : "+result.error);
        };
        me.successCB = successCB;
        me.failCB = failCB;
        getFeed(me.successCB,me.failCB);
    }

});